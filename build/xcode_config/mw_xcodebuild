#!/usr/bin/python

#
# This script is a wrapper around xcodebuild that verifies that the
# requested target and configuration are valid and then performs a
# clean and build of that target+config.  (Annoyingly, xcodebuild will
# warn about an invalid target or config, but will then proceed to
# build the default target/config instead.)  Its purpose is to help
# catch build configuration errors that could lead, for example, to
# buildbot doing a 10.6-only build when it should do a 10.5-compatible
# one.
#

from cStringIO import StringIO
import os
import string
from subprocess import check_call, Popen, PIPE
import sys


xcodebuild = '/Developer/usr/bin/xcodebuild'
if os.path.isdir('/Applications/Xcode.app'):
    # Xcode 4.3 or later
    xcodebuild = '/Applications/Xcode.app/Contents' + xcodebuild


def die(msg='', status=1):
    if msg:
        sys.stderr.write('%s\n' % msg)
    sys.exit(status)


def assert_(expr):
    if not expr:
        die('unexpected output from xcodebuild')


def error(msg):
    die('ERROR: ' +  msg)


def get_targets_and_configs():
    cmd = Popen(
        args = (xcodebuild, '-list'),
        stdout = PIPE,
        )

    output = StringIO(cmd.communicate()[0])
    if cmd.returncode != 0:
        die()

    def nextline():
        return output.readline().strip()

    def collect_names():
        all_names = []
        active_marker = ' (Active)'

        while True:
            name = nextline()
            if not name:
                break
            if name.endswith(active_marker):
                name = name[:-len(active_marker)]
            all_names.append(name)

        return all_names

    assert_(nextline().startswith('Information about project '))
    assert_(nextline() == 'Targets:')
    targets = collect_names()
    assert_(nextline() == 'Build Configurations:')
    configs = collect_names()
    assert_(nextline().startswith('If no build configuration is specified '))
    assert_(not nextline())

    return targets, configs


def main():
    if len(sys.argv) not in (3, 4):
        die(status = 2,
            msg = ('Usage: %s target configuration [MW_VERSION]' %
                   os.path.basename(sys.argv[0])),
            )

    target = sys.argv[1]
    config = sys.argv[2]

    valid_targets, valid_configs = get_targets_and_configs()

    if target not in valid_targets:
        error('invalid target: "%s"' % target)
    if config not in valid_configs:
        error('invalid config: "%s"' % config)

    cmd = [xcodebuild,
           '-target', target,
           '-configuration', config,
           'clean',
           'build',
           ]

    if len(sys.argv) == 4:
        mw_version = sys.argv[3]
        # Use version number only if it starts with a digit.  This
        # will exclude fake versions like "NIGHTLY" and "CUSTOM".
        if mw_version[0] in string.digits:
            cmd.append('MW_VERSION=' + mw_version)

    check_call(cmd)


if __name__ == '__main__':
    main()
